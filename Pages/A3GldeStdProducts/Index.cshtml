@page
@using System.Text.Json
@using System.Linq
@model ControlCenterApp.Pages.A3GldeStdProducts.IndexModel
@{
    ViewData["Title"] = "Products";
}

<h1>Products</h1>

<div class="d-flex align-items-center mb-2">
    <a asp-page="Create" class="btn btn-primary me-2">
        <i class="bi bi-plus-circle me-1"></i> New
    </a>
    <button id="loadBtn" class="btn btn-secondary me-2">Refresh</button>
    <button id="saveBtn" class="btn btn-success me-2">Save</button>

    <div class="form-check form-switch ms-3 mb-0">
        <input class="form-check-input" type="checkbox" id="autoSaveCheckbox" checked>
        <label class="form-check-label" for="autoSaveCheckbox">
            Auto Save
        </label>
    </div>
</div>

<div id="messageBox" class="alert alert-info d-none" role="alert"></div>
<div id="hot-table" class="ht-theme-horizon"></div>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-horizon.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <script>
        const container = document.getElementById('hot-table');
        const messageBox = document.getElementById('messageBox');
        const loadBtn = document.getElementById('loadBtn');
        const saveBtn = document.getElementById('saveBtn');
        const autoChk = document.getElementById('autoSaveCheckbox');
        let autoSave = autoChk.checked;
        const changedRows = new Map();

        const initialData = @Html.Raw(JsonSerializer.Serialize(
                            Model.Items.Select(i => new { i.RefId, i.PProduct, i.PProductName, i.PSystem, i.IasLob })
                    ));

    const hot = new Handsontable(container, {
        data: initialData,
        colHeaders: [
            "@Html.DisplayNameFor(m => m.Items[0].PProduct)",
            "@Html.DisplayNameFor(m => m.Items[0].PProductName)",
            "@Html.DisplayNameFor(m => m.Items[0].PSystem)",
            "@Html.DisplayNameFor(m => m.Items[0].IasLob)"
        ],
        columns: [
            { data: 'PProduct', allowEmpty: false, allowInvalid: false },
            { data: 'PProductName' },
            { data: 'PSystem', allowEmpty: false, allowInvalid: false },
            { data: 'IasLob', allowEmpty: false, allowInvalid: false }
        ],
        height: 500,
        rowHeaders: true,
        dropdownMenu: ['make_read_only', 'alignment', '---------', 'filter_by_condition', 'filter_by_value', 'filter_action_bar'],
        filters: true,
        autoWrapRow: true,
        autoWrapCol: true,
        multiColumnSorting: true,
        manualRowResize: true,
        manualColumnResize: true,
        navigableHeaders: true,
        contextMenu: true,
        licenseKey: 'non-commercial-and-evaluation',
        afterChange: async (changes, source) => {
            if (!changes || source === 'loadData' || source === 'assignId') return;
            for (const [row] of changes) {
                const rowData = hot.getSourceDataAtRow(row);
                // if missing required, skip
                if (!rowData.PProduct || !rowData.PSystem || !rowData.IasLob) continue;

                    // new record
                    if (!rowData.RefId) {
                        const createRes = await fetch('@Url.Page("./Index", "Create")', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(rowData)
                        });
                        if (createRes.ok) {
                            const created = await createRes.json();
                            const id = created.refId || created.RefId;
                            hot.setDataAtRowProp(row, 'RefId', id, 'assignId');
                            rowData.RefId = id;
                        }
                    }
                    // existing
                    else {
                        changedRows.set(rowData.RefId, rowData);
                        if (autoSave) {
                            await fetch('@Url.Page("./Index", "Save")', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(rowData)
                            });
                        }
                    }
                }
            }
        });

        async function showMessage(msg) {
            messageBox.textContent = msg;
            messageBox.classList.remove('d-none');
            await new Promise(r => setTimeout(r, 2000));
            messageBox.classList.add('d-none');
        }

        async function loadData() {
            const res = await fetch('@Url.Page("./Index", "GridData")');
            const rows = await res.json();
            hot.loadData(rows);
            changedRows.clear();
            showMessage('Data loaded');
        }

        async function saveData() {
            if (changedRows.size === 0) {
                showMessage('No changes');
                return;
            }
            const res = await fetch('@Url.Page("./Index", "SaveAll")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(Array.from(changedRows.values()))
            });
            if (res.ok) {
                showMessage('Data saved');
                changedRows.clear();
            }
        }

        // event wiring
        loadBtn.addEventListener('click', loadData);
        saveBtn.addEventListener('click', saveData);
        autoChk.addEventListener('change', () => {
            autoSave = autoChk.checked;
            showMessage(`Auto save ${autoSave ? 'enabled' : 'disabled'}`);
        });
    </script>
}
